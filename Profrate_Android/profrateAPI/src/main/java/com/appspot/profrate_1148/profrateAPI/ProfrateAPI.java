/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2015-11-16 19:10:01 UTC)
 * on 2015-12-13 at 08:04:10 UTC 
 * Modify at your own risk.
 */

package com.appspot.profrate_1148.profrateAPI;

/**
 * Service definition for ProfrateAPI (v1.0).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ProfrateAPIRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class ProfrateAPI extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.21.0 of the profrateAPI library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://profrate-1148.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "profrateAPI/v1.0/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public ProfrateAPI(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  ProfrateAPI(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "article_comment".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link ArticleComment#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.ProfrateArticleCommentRequest}
   * @return the request
   */
  public ArticleComment articleComment(com.appspot.profrate_1148.profrateAPI.model.ProfrateArticleCommentRequest content) throws java.io.IOException {
    ArticleComment result = new ArticleComment(content);
    initialize(result);
    return result;
  }

  public class ArticleComment extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage> {

    private static final String REST_PATH = "article_comment";

    /**
     * Create a request for the method "article_comment".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link ArticleComment#execute()} method to invoke the remote
     * operation. <p> {@link ArticleComment#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.ProfrateArticleCommentRequest}
     * @since 1.13
     */
    protected ArticleComment(com.appspot.profrate_1148.profrateAPI.model.ProfrateArticleCommentRequest content) {
      super(ProfrateAPI.this, "POST", REST_PATH, content, com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage.class);
    }

    @Override
    public ArticleComment setAlt(java.lang.String alt) {
      return (ArticleComment) super.setAlt(alt);
    }

    @Override
    public ArticleComment setFields(java.lang.String fields) {
      return (ArticleComment) super.setFields(fields);
    }

    @Override
    public ArticleComment setKey(java.lang.String key) {
      return (ArticleComment) super.setKey(key);
    }

    @Override
    public ArticleComment setOauthToken(java.lang.String oauthToken) {
      return (ArticleComment) super.setOauthToken(oauthToken);
    }

    @Override
    public ArticleComment setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ArticleComment) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ArticleComment setQuotaUser(java.lang.String quotaUser) {
      return (ArticleComment) super.setQuotaUser(quotaUser);
    }

    @Override
    public ArticleComment setUserIp(java.lang.String userIp) {
      return (ArticleComment) super.setUserIp(userIp);
    }

    @Override
    public ArticleComment set(String parameterName, Object value) {
      return (ArticleComment) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "article_delete".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link ArticleDelete#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage}
   * @return the request
   */
  public ArticleDelete articleDelete(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage content) throws java.io.IOException {
    ArticleDelete result = new ArticleDelete(content);
    initialize(result);
    return result;
  }

  public class ArticleDelete extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage> {

    private static final String REST_PATH = "article_delete";

    /**
     * Create a request for the method "article_delete".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link ArticleDelete#execute()} method to invoke the remote
     * operation. <p> {@link ArticleDelete#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage}
     * @since 1.13
     */
    protected ArticleDelete(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage content) {
      super(ProfrateAPI.this, "POST", REST_PATH, content, com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage.class);
    }

    @Override
    public ArticleDelete setAlt(java.lang.String alt) {
      return (ArticleDelete) super.setAlt(alt);
    }

    @Override
    public ArticleDelete setFields(java.lang.String fields) {
      return (ArticleDelete) super.setFields(fields);
    }

    @Override
    public ArticleDelete setKey(java.lang.String key) {
      return (ArticleDelete) super.setKey(key);
    }

    @Override
    public ArticleDelete setOauthToken(java.lang.String oauthToken) {
      return (ArticleDelete) super.setOauthToken(oauthToken);
    }

    @Override
    public ArticleDelete setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ArticleDelete) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ArticleDelete setQuotaUser(java.lang.String quotaUser) {
      return (ArticleDelete) super.setQuotaUser(quotaUser);
    }

    @Override
    public ArticleDelete setUserIp(java.lang.String userIp) {
      return (ArticleDelete) super.setUserIp(userIp);
    }

    @Override
    public ArticleDelete set(String parameterName, Object value) {
      return (ArticleDelete) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "article_edit".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link ArticleEdit#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.ProfrateArticleEditRequest}
   * @return the request
   */
  public ArticleEdit articleEdit(com.appspot.profrate_1148.profrateAPI.model.ProfrateArticleEditRequest content) throws java.io.IOException {
    ArticleEdit result = new ArticleEdit(content);
    initialize(result);
    return result;
  }

  public class ArticleEdit extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage> {

    private static final String REST_PATH = "article_edit";

    /**
     * Create a request for the method "article_edit".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link ArticleEdit#execute()} method to invoke the remote
     * operation. <p> {@link
     * ArticleEdit#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.ProfrateArticleEditRequest}
     * @since 1.13
     */
    protected ArticleEdit(com.appspot.profrate_1148.profrateAPI.model.ProfrateArticleEditRequest content) {
      super(ProfrateAPI.this, "POST", REST_PATH, content, com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage.class);
    }

    @Override
    public ArticleEdit setAlt(java.lang.String alt) {
      return (ArticleEdit) super.setAlt(alt);
    }

    @Override
    public ArticleEdit setFields(java.lang.String fields) {
      return (ArticleEdit) super.setFields(fields);
    }

    @Override
    public ArticleEdit setKey(java.lang.String key) {
      return (ArticleEdit) super.setKey(key);
    }

    @Override
    public ArticleEdit setOauthToken(java.lang.String oauthToken) {
      return (ArticleEdit) super.setOauthToken(oauthToken);
    }

    @Override
    public ArticleEdit setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ArticleEdit) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ArticleEdit setQuotaUser(java.lang.String quotaUser) {
      return (ArticleEdit) super.setQuotaUser(quotaUser);
    }

    @Override
    public ArticleEdit setUserIp(java.lang.String userIp) {
      return (ArticleEdit) super.setUserIp(userIp);
    }

    @Override
    public ArticleEdit set(String parameterName, Object value) {
      return (ArticleEdit) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "article_get".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link ArticleGet#execute()} method to invoke the remote operation.
   *
   * @param value
   * @return the request
   */
  public ArticleGet articleGet(java.lang.Long value) throws java.io.IOException {
    ArticleGet result = new ArticleGet(value);
    initialize(result);
    return result;
  }

  public class ArticleGet extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.ProfrateArticleResponse> {

    private static final String REST_PATH = "article_get";

    /**
     * Create a request for the method "article_get".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link ArticleGet#execute()} method to invoke the remote
     * operation. <p> {@link
     * ArticleGet#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param value
     * @since 1.13
     */
    protected ArticleGet(java.lang.Long value) {
      super(ProfrateAPI.this, "GET", REST_PATH, null, com.appspot.profrate_1148.profrateAPI.model.ProfrateArticleResponse.class);
      this.value = com.google.api.client.util.Preconditions.checkNotNull(value, "Required parameter value must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ArticleGet setAlt(java.lang.String alt) {
      return (ArticleGet) super.setAlt(alt);
    }

    @Override
    public ArticleGet setFields(java.lang.String fields) {
      return (ArticleGet) super.setFields(fields);
    }

    @Override
    public ArticleGet setKey(java.lang.String key) {
      return (ArticleGet) super.setKey(key);
    }

    @Override
    public ArticleGet setOauthToken(java.lang.String oauthToken) {
      return (ArticleGet) super.setOauthToken(oauthToken);
    }

    @Override
    public ArticleGet setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ArticleGet) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ArticleGet setQuotaUser(java.lang.String quotaUser) {
      return (ArticleGet) super.setQuotaUser(quotaUser);
    }

    @Override
    public ArticleGet setUserIp(java.lang.String userIp) {
      return (ArticleGet) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long value;

    /**

     */
    public java.lang.Long getValue() {
      return value;
    }

    public ArticleGet setValue(java.lang.Long value) {
      this.value = value;
      return this;
    }

    @Override
    public ArticleGet set(String parameterName, Object value) {
      return (ArticleGet) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "article_get_comments".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link ArticleGetComments#execute()} method to invoke the remote operation.
   *
   * @param value
   * @return the request
   */
  public ArticleGetComments articleGetComments(java.lang.Long value) throws java.io.IOException {
    ArticleGetComments result = new ArticleGetComments(value);
    initialize(result);
    return result;
  }

  public class ArticleGetComments extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.ProfrateMultiCommentResponse> {

    private static final String REST_PATH = "article_get_comments";

    /**
     * Create a request for the method "article_get_comments".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link ArticleGetComments#execute()} method to invoke the remote
     * operation. <p> {@link ArticleGetComments#initialize(com.google.api.client.googleapis.services.A
     * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param value
     * @since 1.13
     */
    protected ArticleGetComments(java.lang.Long value) {
      super(ProfrateAPI.this, "GET", REST_PATH, null, com.appspot.profrate_1148.profrateAPI.model.ProfrateMultiCommentResponse.class);
      this.value = com.google.api.client.util.Preconditions.checkNotNull(value, "Required parameter value must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ArticleGetComments setAlt(java.lang.String alt) {
      return (ArticleGetComments) super.setAlt(alt);
    }

    @Override
    public ArticleGetComments setFields(java.lang.String fields) {
      return (ArticleGetComments) super.setFields(fields);
    }

    @Override
    public ArticleGetComments setKey(java.lang.String key) {
      return (ArticleGetComments) super.setKey(key);
    }

    @Override
    public ArticleGetComments setOauthToken(java.lang.String oauthToken) {
      return (ArticleGetComments) super.setOauthToken(oauthToken);
    }

    @Override
    public ArticleGetComments setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ArticleGetComments) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ArticleGetComments setQuotaUser(java.lang.String quotaUser) {
      return (ArticleGetComments) super.setQuotaUser(quotaUser);
    }

    @Override
    public ArticleGetComments setUserIp(java.lang.String userIp) {
      return (ArticleGetComments) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long value;

    /**

     */
    public java.lang.Long getValue() {
      return value;
    }

    public ArticleGetComments setValue(java.lang.Long value) {
      this.value = value;
      return this;
    }

    @Override
    public ArticleGetComments set(String parameterName, Object value) {
      return (ArticleGetComments) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "article_toggle_dislike".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link ArticleToggleDislike#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage}
   * @return the request
   */
  public ArticleToggleDislike articleToggleDislike(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage content) throws java.io.IOException {
    ArticleToggleDislike result = new ArticleToggleDislike(content);
    initialize(result);
    return result;
  }

  public class ArticleToggleDislike extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage> {

    private static final String REST_PATH = "article_toggle_dislike";

    /**
     * Create a request for the method "article_toggle_dislike".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link ArticleToggleDislike#execute()} method to invoke the
     * remote operation. <p> {@link ArticleToggleDislike#initialize(com.google.api.client.googleapis.s
     * ervices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage}
     * @since 1.13
     */
    protected ArticleToggleDislike(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage content) {
      super(ProfrateAPI.this, "POST", REST_PATH, content, com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage.class);
    }

    @Override
    public ArticleToggleDislike setAlt(java.lang.String alt) {
      return (ArticleToggleDislike) super.setAlt(alt);
    }

    @Override
    public ArticleToggleDislike setFields(java.lang.String fields) {
      return (ArticleToggleDislike) super.setFields(fields);
    }

    @Override
    public ArticleToggleDislike setKey(java.lang.String key) {
      return (ArticleToggleDislike) super.setKey(key);
    }

    @Override
    public ArticleToggleDislike setOauthToken(java.lang.String oauthToken) {
      return (ArticleToggleDislike) super.setOauthToken(oauthToken);
    }

    @Override
    public ArticleToggleDislike setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ArticleToggleDislike) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ArticleToggleDislike setQuotaUser(java.lang.String quotaUser) {
      return (ArticleToggleDislike) super.setQuotaUser(quotaUser);
    }

    @Override
    public ArticleToggleDislike setUserIp(java.lang.String userIp) {
      return (ArticleToggleDislike) super.setUserIp(userIp);
    }

    @Override
    public ArticleToggleDislike set(String parameterName, Object value) {
      return (ArticleToggleDislike) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "article_toggle_like".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link ArticleToggleLike#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage}
   * @return the request
   */
  public ArticleToggleLike articleToggleLike(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage content) throws java.io.IOException {
    ArticleToggleLike result = new ArticleToggleLike(content);
    initialize(result);
    return result;
  }

  public class ArticleToggleLike extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage> {

    private static final String REST_PATH = "article_toggle_like";

    /**
     * Create a request for the method "article_toggle_like".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link ArticleToggleLike#execute()} method to invoke the remote
     * operation. <p> {@link ArticleToggleLike#initialize(com.google.api.client.googleapis.services.Ab
     * stractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage}
     * @since 1.13
     */
    protected ArticleToggleLike(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage content) {
      super(ProfrateAPI.this, "POST", REST_PATH, content, com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage.class);
    }

    @Override
    public ArticleToggleLike setAlt(java.lang.String alt) {
      return (ArticleToggleLike) super.setAlt(alt);
    }

    @Override
    public ArticleToggleLike setFields(java.lang.String fields) {
      return (ArticleToggleLike) super.setFields(fields);
    }

    @Override
    public ArticleToggleLike setKey(java.lang.String key) {
      return (ArticleToggleLike) super.setKey(key);
    }

    @Override
    public ArticleToggleLike setOauthToken(java.lang.String oauthToken) {
      return (ArticleToggleLike) super.setOauthToken(oauthToken);
    }

    @Override
    public ArticleToggleLike setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ArticleToggleLike) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ArticleToggleLike setQuotaUser(java.lang.String quotaUser) {
      return (ArticleToggleLike) super.setQuotaUser(quotaUser);
    }

    @Override
    public ArticleToggleLike setUserIp(java.lang.String userIp) {
      return (ArticleToggleLike) super.setUserIp(userIp);
    }

    @Override
    public ArticleToggleLike set(String parameterName, Object value) {
      return (ArticleToggleLike) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "comment_delete".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link CommentDelete#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage}
   * @return the request
   */
  public CommentDelete commentDelete(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage content) throws java.io.IOException {
    CommentDelete result = new CommentDelete(content);
    initialize(result);
    return result;
  }

  public class CommentDelete extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage> {

    private static final String REST_PATH = "comment_delete";

    /**
     * Create a request for the method "comment_delete".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link CommentDelete#execute()} method to invoke the remote
     * operation. <p> {@link CommentDelete#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage}
     * @since 1.13
     */
    protected CommentDelete(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage content) {
      super(ProfrateAPI.this, "POST", REST_PATH, content, com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage.class);
    }

    @Override
    public CommentDelete setAlt(java.lang.String alt) {
      return (CommentDelete) super.setAlt(alt);
    }

    @Override
    public CommentDelete setFields(java.lang.String fields) {
      return (CommentDelete) super.setFields(fields);
    }

    @Override
    public CommentDelete setKey(java.lang.String key) {
      return (CommentDelete) super.setKey(key);
    }

    @Override
    public CommentDelete setOauthToken(java.lang.String oauthToken) {
      return (CommentDelete) super.setOauthToken(oauthToken);
    }

    @Override
    public CommentDelete setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (CommentDelete) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public CommentDelete setQuotaUser(java.lang.String quotaUser) {
      return (CommentDelete) super.setQuotaUser(quotaUser);
    }

    @Override
    public CommentDelete setUserIp(java.lang.String userIp) {
      return (CommentDelete) super.setUserIp(userIp);
    }

    @Override
    public CommentDelete set(String parameterName, Object value) {
      return (CommentDelete) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "comment_edit".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link CommentEdit#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.ProfrateCommentEditRequest}
   * @return the request
   */
  public CommentEdit commentEdit(com.appspot.profrate_1148.profrateAPI.model.ProfrateCommentEditRequest content) throws java.io.IOException {
    CommentEdit result = new CommentEdit(content);
    initialize(result);
    return result;
  }

  public class CommentEdit extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage> {

    private static final String REST_PATH = "comment_edit";

    /**
     * Create a request for the method "comment_edit".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link CommentEdit#execute()} method to invoke the remote
     * operation. <p> {@link
     * CommentEdit#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.ProfrateCommentEditRequest}
     * @since 1.13
     */
    protected CommentEdit(com.appspot.profrate_1148.profrateAPI.model.ProfrateCommentEditRequest content) {
      super(ProfrateAPI.this, "POST", REST_PATH, content, com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage.class);
    }

    @Override
    public CommentEdit setAlt(java.lang.String alt) {
      return (CommentEdit) super.setAlt(alt);
    }

    @Override
    public CommentEdit setFields(java.lang.String fields) {
      return (CommentEdit) super.setFields(fields);
    }

    @Override
    public CommentEdit setKey(java.lang.String key) {
      return (CommentEdit) super.setKey(key);
    }

    @Override
    public CommentEdit setOauthToken(java.lang.String oauthToken) {
      return (CommentEdit) super.setOauthToken(oauthToken);
    }

    @Override
    public CommentEdit setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (CommentEdit) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public CommentEdit setQuotaUser(java.lang.String quotaUser) {
      return (CommentEdit) super.setQuotaUser(quotaUser);
    }

    @Override
    public CommentEdit setUserIp(java.lang.String userIp) {
      return (CommentEdit) super.setUserIp(userIp);
    }

    @Override
    public CommentEdit set(String parameterName, Object value) {
      return (CommentEdit) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "comment_get".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link CommentGet#execute()} method to invoke the remote operation.
   *
   * @param value
   * @return the request
   */
  public CommentGet commentGet(java.lang.Long value) throws java.io.IOException {
    CommentGet result = new CommentGet(value);
    initialize(result);
    return result;
  }

  public class CommentGet extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.ProfrateCommentResponse> {

    private static final String REST_PATH = "comment_get";

    /**
     * Create a request for the method "comment_get".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link CommentGet#execute()} method to invoke the remote
     * operation. <p> {@link
     * CommentGet#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param value
     * @since 1.13
     */
    protected CommentGet(java.lang.Long value) {
      super(ProfrateAPI.this, "GET", REST_PATH, null, com.appspot.profrate_1148.profrateAPI.model.ProfrateCommentResponse.class);
      this.value = com.google.api.client.util.Preconditions.checkNotNull(value, "Required parameter value must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public CommentGet setAlt(java.lang.String alt) {
      return (CommentGet) super.setAlt(alt);
    }

    @Override
    public CommentGet setFields(java.lang.String fields) {
      return (CommentGet) super.setFields(fields);
    }

    @Override
    public CommentGet setKey(java.lang.String key) {
      return (CommentGet) super.setKey(key);
    }

    @Override
    public CommentGet setOauthToken(java.lang.String oauthToken) {
      return (CommentGet) super.setOauthToken(oauthToken);
    }

    @Override
    public CommentGet setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (CommentGet) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public CommentGet setQuotaUser(java.lang.String quotaUser) {
      return (CommentGet) super.setQuotaUser(quotaUser);
    }

    @Override
    public CommentGet setUserIp(java.lang.String userIp) {
      return (CommentGet) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long value;

    /**

     */
    public java.lang.Long getValue() {
      return value;
    }

    public CommentGet setValue(java.lang.Long value) {
      this.value = value;
      return this;
    }

    @Override
    public CommentGet set(String parameterName, Object value) {
      return (CommentGet) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "comment_get_replies".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link CommentGetReplies#execute()} method to invoke the remote operation.
   *
   * @param value
   * @return the request
   */
  public CommentGetReplies commentGetReplies(java.lang.Long value) throws java.io.IOException {
    CommentGetReplies result = new CommentGetReplies(value);
    initialize(result);
    return result;
  }

  public class CommentGetReplies extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.ProfrateMultiCommentReplyResponse> {

    private static final String REST_PATH = "comment_get_replies";

    /**
     * Create a request for the method "comment_get_replies".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link CommentGetReplies#execute()} method to invoke the remote
     * operation. <p> {@link CommentGetReplies#initialize(com.google.api.client.googleapis.services.Ab
     * stractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param value
     * @since 1.13
     */
    protected CommentGetReplies(java.lang.Long value) {
      super(ProfrateAPI.this, "GET", REST_PATH, null, com.appspot.profrate_1148.profrateAPI.model.ProfrateMultiCommentReplyResponse.class);
      this.value = com.google.api.client.util.Preconditions.checkNotNull(value, "Required parameter value must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public CommentGetReplies setAlt(java.lang.String alt) {
      return (CommentGetReplies) super.setAlt(alt);
    }

    @Override
    public CommentGetReplies setFields(java.lang.String fields) {
      return (CommentGetReplies) super.setFields(fields);
    }

    @Override
    public CommentGetReplies setKey(java.lang.String key) {
      return (CommentGetReplies) super.setKey(key);
    }

    @Override
    public CommentGetReplies setOauthToken(java.lang.String oauthToken) {
      return (CommentGetReplies) super.setOauthToken(oauthToken);
    }

    @Override
    public CommentGetReplies setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (CommentGetReplies) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public CommentGetReplies setQuotaUser(java.lang.String quotaUser) {
      return (CommentGetReplies) super.setQuotaUser(quotaUser);
    }

    @Override
    public CommentGetReplies setUserIp(java.lang.String userIp) {
      return (CommentGetReplies) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long value;

    /**

     */
    public java.lang.Long getValue() {
      return value;
    }

    public CommentGetReplies setValue(java.lang.Long value) {
      this.value = value;
      return this;
    }

    @Override
    public CommentGetReplies set(String parameterName, Object value) {
      return (CommentGetReplies) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "comment_reply".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link CommentReply#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.ProfrateReplyRequest}
   * @return the request
   */
  public CommentReply commentReply(com.appspot.profrate_1148.profrateAPI.model.ProfrateReplyRequest content) throws java.io.IOException {
    CommentReply result = new CommentReply(content);
    initialize(result);
    return result;
  }

  public class CommentReply extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage> {

    private static final String REST_PATH = "comment_reply";

    /**
     * Create a request for the method "comment_reply".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link CommentReply#execute()} method to invoke the remote
     * operation. <p> {@link
     * CommentReply#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.ProfrateReplyRequest}
     * @since 1.13
     */
    protected CommentReply(com.appspot.profrate_1148.profrateAPI.model.ProfrateReplyRequest content) {
      super(ProfrateAPI.this, "POST", REST_PATH, content, com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage.class);
    }

    @Override
    public CommentReply setAlt(java.lang.String alt) {
      return (CommentReply) super.setAlt(alt);
    }

    @Override
    public CommentReply setFields(java.lang.String fields) {
      return (CommentReply) super.setFields(fields);
    }

    @Override
    public CommentReply setKey(java.lang.String key) {
      return (CommentReply) super.setKey(key);
    }

    @Override
    public CommentReply setOauthToken(java.lang.String oauthToken) {
      return (CommentReply) super.setOauthToken(oauthToken);
    }

    @Override
    public CommentReply setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (CommentReply) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public CommentReply setQuotaUser(java.lang.String quotaUser) {
      return (CommentReply) super.setQuotaUser(quotaUser);
    }

    @Override
    public CommentReply setUserIp(java.lang.String userIp) {
      return (CommentReply) super.setUserIp(userIp);
    }

    @Override
    public CommentReply set(String parameterName, Object value) {
      return (CommentReply) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "comment_reply_delete".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link CommentReplyDelete#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage}
   * @return the request
   */
  public CommentReplyDelete commentReplyDelete(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage content) throws java.io.IOException {
    CommentReplyDelete result = new CommentReplyDelete(content);
    initialize(result);
    return result;
  }

  public class CommentReplyDelete extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage> {

    private static final String REST_PATH = "comment_reply_delete";

    /**
     * Create a request for the method "comment_reply_delete".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link CommentReplyDelete#execute()} method to invoke the remote
     * operation. <p> {@link CommentReplyDelete#initialize(com.google.api.client.googleapis.services.A
     * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage}
     * @since 1.13
     */
    protected CommentReplyDelete(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage content) {
      super(ProfrateAPI.this, "POST", REST_PATH, content, com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage.class);
    }

    @Override
    public CommentReplyDelete setAlt(java.lang.String alt) {
      return (CommentReplyDelete) super.setAlt(alt);
    }

    @Override
    public CommentReplyDelete setFields(java.lang.String fields) {
      return (CommentReplyDelete) super.setFields(fields);
    }

    @Override
    public CommentReplyDelete setKey(java.lang.String key) {
      return (CommentReplyDelete) super.setKey(key);
    }

    @Override
    public CommentReplyDelete setOauthToken(java.lang.String oauthToken) {
      return (CommentReplyDelete) super.setOauthToken(oauthToken);
    }

    @Override
    public CommentReplyDelete setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (CommentReplyDelete) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public CommentReplyDelete setQuotaUser(java.lang.String quotaUser) {
      return (CommentReplyDelete) super.setQuotaUser(quotaUser);
    }

    @Override
    public CommentReplyDelete setUserIp(java.lang.String userIp) {
      return (CommentReplyDelete) super.setUserIp(userIp);
    }

    @Override
    public CommentReplyDelete set(String parameterName, Object value) {
      return (CommentReplyDelete) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "comment_reply_edit".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link CommentReplyEdit#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.ProfrateCommentReplyEditRequest}
   * @return the request
   */
  public CommentReplyEdit commentReplyEdit(com.appspot.profrate_1148.profrateAPI.model.ProfrateCommentReplyEditRequest content) throws java.io.IOException {
    CommentReplyEdit result = new CommentReplyEdit(content);
    initialize(result);
    return result;
  }

  public class CommentReplyEdit extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage> {

    private static final String REST_PATH = "comment_reply_edit";

    /**
     * Create a request for the method "comment_reply_edit".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link CommentReplyEdit#execute()} method to invoke the remote
     * operation. <p> {@link CommentReplyEdit#initialize(com.google.api.client.googleapis.services.Abs
     * tractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.ProfrateCommentReplyEditRequest}
     * @since 1.13
     */
    protected CommentReplyEdit(com.appspot.profrate_1148.profrateAPI.model.ProfrateCommentReplyEditRequest content) {
      super(ProfrateAPI.this, "POST", REST_PATH, content, com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage.class);
    }

    @Override
    public CommentReplyEdit setAlt(java.lang.String alt) {
      return (CommentReplyEdit) super.setAlt(alt);
    }

    @Override
    public CommentReplyEdit setFields(java.lang.String fields) {
      return (CommentReplyEdit) super.setFields(fields);
    }

    @Override
    public CommentReplyEdit setKey(java.lang.String key) {
      return (CommentReplyEdit) super.setKey(key);
    }

    @Override
    public CommentReplyEdit setOauthToken(java.lang.String oauthToken) {
      return (CommentReplyEdit) super.setOauthToken(oauthToken);
    }

    @Override
    public CommentReplyEdit setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (CommentReplyEdit) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public CommentReplyEdit setQuotaUser(java.lang.String quotaUser) {
      return (CommentReplyEdit) super.setQuotaUser(quotaUser);
    }

    @Override
    public CommentReplyEdit setUserIp(java.lang.String userIp) {
      return (CommentReplyEdit) super.setUserIp(userIp);
    }

    @Override
    public CommentReplyEdit set(String parameterName, Object value) {
      return (CommentReplyEdit) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "comment_reply_get".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link CommentReplyGet#execute()} method to invoke the remote operation.
   *
   * @param value
   * @return the request
   */
  public CommentReplyGet commentReplyGet(java.lang.Long value) throws java.io.IOException {
    CommentReplyGet result = new CommentReplyGet(value);
    initialize(result);
    return result;
  }

  public class CommentReplyGet extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.ProfrateCommentReplyResponse> {

    private static final String REST_PATH = "comment_reply_get";

    /**
     * Create a request for the method "comment_reply_get".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link CommentReplyGet#execute()} method to invoke the remote
     * operation. <p> {@link CommentReplyGet#initialize(com.google.api.client.googleapis.services.Abst
     * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param value
     * @since 1.13
     */
    protected CommentReplyGet(java.lang.Long value) {
      super(ProfrateAPI.this, "GET", REST_PATH, null, com.appspot.profrate_1148.profrateAPI.model.ProfrateCommentReplyResponse.class);
      this.value = com.google.api.client.util.Preconditions.checkNotNull(value, "Required parameter value must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public CommentReplyGet setAlt(java.lang.String alt) {
      return (CommentReplyGet) super.setAlt(alt);
    }

    @Override
    public CommentReplyGet setFields(java.lang.String fields) {
      return (CommentReplyGet) super.setFields(fields);
    }

    @Override
    public CommentReplyGet setKey(java.lang.String key) {
      return (CommentReplyGet) super.setKey(key);
    }

    @Override
    public CommentReplyGet setOauthToken(java.lang.String oauthToken) {
      return (CommentReplyGet) super.setOauthToken(oauthToken);
    }

    @Override
    public CommentReplyGet setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (CommentReplyGet) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public CommentReplyGet setQuotaUser(java.lang.String quotaUser) {
      return (CommentReplyGet) super.setQuotaUser(quotaUser);
    }

    @Override
    public CommentReplyGet setUserIp(java.lang.String userIp) {
      return (CommentReplyGet) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long value;

    /**

     */
    public java.lang.Long getValue() {
      return value;
    }

    public CommentReplyGet setValue(java.lang.Long value) {
      this.value = value;
      return this;
    }

    @Override
    public CommentReplyGet set(String parameterName, Object value) {
      return (CommentReplyGet) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "comment_toggle_dislike".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link CommentToggleDislike#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage}
   * @return the request
   */
  public CommentToggleDislike commentToggleDislike(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage content) throws java.io.IOException {
    CommentToggleDislike result = new CommentToggleDislike(content);
    initialize(result);
    return result;
  }

  public class CommentToggleDislike extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage> {

    private static final String REST_PATH = "comment_toggle_dislike";

    /**
     * Create a request for the method "comment_toggle_dislike".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link CommentToggleDislike#execute()} method to invoke the
     * remote operation. <p> {@link CommentToggleDislike#initialize(com.google.api.client.googleapis.s
     * ervices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage}
     * @since 1.13
     */
    protected CommentToggleDislike(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage content) {
      super(ProfrateAPI.this, "POST", REST_PATH, content, com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage.class);
    }

    @Override
    public CommentToggleDislike setAlt(java.lang.String alt) {
      return (CommentToggleDislike) super.setAlt(alt);
    }

    @Override
    public CommentToggleDislike setFields(java.lang.String fields) {
      return (CommentToggleDislike) super.setFields(fields);
    }

    @Override
    public CommentToggleDislike setKey(java.lang.String key) {
      return (CommentToggleDislike) super.setKey(key);
    }

    @Override
    public CommentToggleDislike setOauthToken(java.lang.String oauthToken) {
      return (CommentToggleDislike) super.setOauthToken(oauthToken);
    }

    @Override
    public CommentToggleDislike setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (CommentToggleDislike) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public CommentToggleDislike setQuotaUser(java.lang.String quotaUser) {
      return (CommentToggleDislike) super.setQuotaUser(quotaUser);
    }

    @Override
    public CommentToggleDislike setUserIp(java.lang.String userIp) {
      return (CommentToggleDislike) super.setUserIp(userIp);
    }

    @Override
    public CommentToggleDislike set(String parameterName, Object value) {
      return (CommentToggleDislike) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "comment_toggle_like".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link CommentToggleLike#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage}
   * @return the request
   */
  public CommentToggleLike commentToggleLike(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage content) throws java.io.IOException {
    CommentToggleLike result = new CommentToggleLike(content);
    initialize(result);
    return result;
  }

  public class CommentToggleLike extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage> {

    private static final String REST_PATH = "comment_toggle_like";

    /**
     * Create a request for the method "comment_toggle_like".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link CommentToggleLike#execute()} method to invoke the remote
     * operation. <p> {@link CommentToggleLike#initialize(com.google.api.client.googleapis.services.Ab
     * stractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage}
     * @since 1.13
     */
    protected CommentToggleLike(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage content) {
      super(ProfrateAPI.this, "POST", REST_PATH, content, com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage.class);
    }

    @Override
    public CommentToggleLike setAlt(java.lang.String alt) {
      return (CommentToggleLike) super.setAlt(alt);
    }

    @Override
    public CommentToggleLike setFields(java.lang.String fields) {
      return (CommentToggleLike) super.setFields(fields);
    }

    @Override
    public CommentToggleLike setKey(java.lang.String key) {
      return (CommentToggleLike) super.setKey(key);
    }

    @Override
    public CommentToggleLike setOauthToken(java.lang.String oauthToken) {
      return (CommentToggleLike) super.setOauthToken(oauthToken);
    }

    @Override
    public CommentToggleLike setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (CommentToggleLike) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public CommentToggleLike setQuotaUser(java.lang.String quotaUser) {
      return (CommentToggleLike) super.setQuotaUser(quotaUser);
    }

    @Override
    public CommentToggleLike setUserIp(java.lang.String userIp) {
      return (CommentToggleLike) super.setUserIp(userIp);
    }

    @Override
    public CommentToggleLike set(String parameterName, Object value) {
      return (CommentToggleLike) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "professor_comment".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link ProfessorComment#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.ProfrateProfessorCommentRequest}
   * @return the request
   */
  public ProfessorComment professorComment(com.appspot.profrate_1148.profrateAPI.model.ProfrateProfessorCommentRequest content) throws java.io.IOException {
    ProfessorComment result = new ProfessorComment(content);
    initialize(result);
    return result;
  }

  public class ProfessorComment extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage> {

    private static final String REST_PATH = "professor_comment";

    /**
     * Create a request for the method "professor_comment".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link ProfessorComment#execute()} method to invoke the remote
     * operation. <p> {@link ProfessorComment#initialize(com.google.api.client.googleapis.services.Abs
     * tractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.ProfrateProfessorCommentRequest}
     * @since 1.13
     */
    protected ProfessorComment(com.appspot.profrate_1148.profrateAPI.model.ProfrateProfessorCommentRequest content) {
      super(ProfrateAPI.this, "POST", REST_PATH, content, com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage.class);
    }

    @Override
    public ProfessorComment setAlt(java.lang.String alt) {
      return (ProfessorComment) super.setAlt(alt);
    }

    @Override
    public ProfessorComment setFields(java.lang.String fields) {
      return (ProfessorComment) super.setFields(fields);
    }

    @Override
    public ProfessorComment setKey(java.lang.String key) {
      return (ProfessorComment) super.setKey(key);
    }

    @Override
    public ProfessorComment setOauthToken(java.lang.String oauthToken) {
      return (ProfessorComment) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfessorComment setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfessorComment) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfessorComment setQuotaUser(java.lang.String quotaUser) {
      return (ProfessorComment) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfessorComment setUserIp(java.lang.String userIp) {
      return (ProfessorComment) super.setUserIp(userIp);
    }

    @Override
    public ProfessorComment set(String parameterName, Object value) {
      return (ProfessorComment) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "professor_get".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link ProfessorGet#execute()} method to invoke the remote operation.
   *
   * @param value
   * @return the request
   */
  public ProfessorGet professorGet(java.lang.Long value) throws java.io.IOException {
    ProfessorGet result = new ProfessorGet(value);
    initialize(result);
    return result;
  }

  public class ProfessorGet extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.ProfrateProfessorResponse> {

    private static final String REST_PATH = "professor_get";

    /**
     * Create a request for the method "professor_get".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link ProfessorGet#execute()} method to invoke the remote
     * operation. <p> {@link
     * ProfessorGet#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param value
     * @since 1.13
     */
    protected ProfessorGet(java.lang.Long value) {
      super(ProfrateAPI.this, "GET", REST_PATH, null, com.appspot.profrate_1148.profrateAPI.model.ProfrateProfessorResponse.class);
      this.value = com.google.api.client.util.Preconditions.checkNotNull(value, "Required parameter value must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ProfessorGet setAlt(java.lang.String alt) {
      return (ProfessorGet) super.setAlt(alt);
    }

    @Override
    public ProfessorGet setFields(java.lang.String fields) {
      return (ProfessorGet) super.setFields(fields);
    }

    @Override
    public ProfessorGet setKey(java.lang.String key) {
      return (ProfessorGet) super.setKey(key);
    }

    @Override
    public ProfessorGet setOauthToken(java.lang.String oauthToken) {
      return (ProfessorGet) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfessorGet setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfessorGet) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfessorGet setQuotaUser(java.lang.String quotaUser) {
      return (ProfessorGet) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfessorGet setUserIp(java.lang.String userIp) {
      return (ProfessorGet) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long value;

    /**

     */
    public java.lang.Long getValue() {
      return value;
    }

    public ProfessorGet setValue(java.lang.Long value) {
      this.value = value;
      return this;
    }

    @Override
    public ProfessorGet set(String parameterName, Object value) {
      return (ProfessorGet) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "professor_get_all".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link ProfessorGetAll#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public ProfessorGetAll professorGetAll() throws java.io.IOException {
    ProfessorGetAll result = new ProfessorGetAll();
    initialize(result);
    return result;
  }

  public class ProfessorGetAll extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.ProfrateMultiProfessorResponse> {

    private static final String REST_PATH = "professor_get_all";

    /**
     * Create a request for the method "professor_get_all".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link ProfessorGetAll#execute()} method to invoke the remote
     * operation. <p> {@link ProfessorGetAll#initialize(com.google.api.client.googleapis.services.Abst
     * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @since 1.13
     */
    protected ProfessorGetAll() {
      super(ProfrateAPI.this, "GET", REST_PATH, null, com.appspot.profrate_1148.profrateAPI.model.ProfrateMultiProfessorResponse.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ProfessorGetAll setAlt(java.lang.String alt) {
      return (ProfessorGetAll) super.setAlt(alt);
    }

    @Override
    public ProfessorGetAll setFields(java.lang.String fields) {
      return (ProfessorGetAll) super.setFields(fields);
    }

    @Override
    public ProfessorGetAll setKey(java.lang.String key) {
      return (ProfessorGetAll) super.setKey(key);
    }

    @Override
    public ProfessorGetAll setOauthToken(java.lang.String oauthToken) {
      return (ProfessorGetAll) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfessorGetAll setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfessorGetAll) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfessorGetAll setQuotaUser(java.lang.String quotaUser) {
      return (ProfessorGetAll) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfessorGetAll setUserIp(java.lang.String userIp) {
      return (ProfessorGetAll) super.setUserIp(userIp);
    }

    @Override
    public ProfessorGetAll set(String parameterName, Object value) {
      return (ProfessorGetAll) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "professor_get_articles".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link ProfessorGetArticles#execute()} method to invoke the remote
   * operation.
   *
   * @param value
   * @return the request
   */
  public ProfessorGetArticles professorGetArticles(java.lang.Long value) throws java.io.IOException {
    ProfessorGetArticles result = new ProfessorGetArticles(value);
    initialize(result);
    return result;
  }

  public class ProfessorGetArticles extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.ProfrateMultiArticleResponse> {

    private static final String REST_PATH = "professor_get_articles";

    /**
     * Create a request for the method "professor_get_articles".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link ProfessorGetArticles#execute()} method to invoke the
     * remote operation. <p> {@link ProfessorGetArticles#initialize(com.google.api.client.googleapis.s
     * ervices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param value
     * @since 1.13
     */
    protected ProfessorGetArticles(java.lang.Long value) {
      super(ProfrateAPI.this, "GET", REST_PATH, null, com.appspot.profrate_1148.profrateAPI.model.ProfrateMultiArticleResponse.class);
      this.value = com.google.api.client.util.Preconditions.checkNotNull(value, "Required parameter value must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ProfessorGetArticles setAlt(java.lang.String alt) {
      return (ProfessorGetArticles) super.setAlt(alt);
    }

    @Override
    public ProfessorGetArticles setFields(java.lang.String fields) {
      return (ProfessorGetArticles) super.setFields(fields);
    }

    @Override
    public ProfessorGetArticles setKey(java.lang.String key) {
      return (ProfessorGetArticles) super.setKey(key);
    }

    @Override
    public ProfessorGetArticles setOauthToken(java.lang.String oauthToken) {
      return (ProfessorGetArticles) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfessorGetArticles setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfessorGetArticles) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfessorGetArticles setQuotaUser(java.lang.String quotaUser) {
      return (ProfessorGetArticles) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfessorGetArticles setUserIp(java.lang.String userIp) {
      return (ProfessorGetArticles) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long value;

    /**

     */
    public java.lang.Long getValue() {
      return value;
    }

    public ProfessorGetArticles setValue(java.lang.Long value) {
      this.value = value;
      return this;
    }

    @Override
    public ProfessorGetArticles set(String parameterName, Object value) {
      return (ProfessorGetArticles) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "professor_get_comments".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link ProfessorGetComments#execute()} method to invoke the remote
   * operation.
   *
   * @param value
   * @return the request
   */
  public ProfessorGetComments professorGetComments(java.lang.Long value) throws java.io.IOException {
    ProfessorGetComments result = new ProfessorGetComments(value);
    initialize(result);
    return result;
  }

  public class ProfessorGetComments extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.ProfrateMultiCommentResponse> {

    private static final String REST_PATH = "professor_get_comments";

    /**
     * Create a request for the method "professor_get_comments".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link ProfessorGetComments#execute()} method to invoke the
     * remote operation. <p> {@link ProfessorGetComments#initialize(com.google.api.client.googleapis.s
     * ervices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param value
     * @since 1.13
     */
    protected ProfessorGetComments(java.lang.Long value) {
      super(ProfrateAPI.this, "GET", REST_PATH, null, com.appspot.profrate_1148.profrateAPI.model.ProfrateMultiCommentResponse.class);
      this.value = com.google.api.client.util.Preconditions.checkNotNull(value, "Required parameter value must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ProfessorGetComments setAlt(java.lang.String alt) {
      return (ProfessorGetComments) super.setAlt(alt);
    }

    @Override
    public ProfessorGetComments setFields(java.lang.String fields) {
      return (ProfessorGetComments) super.setFields(fields);
    }

    @Override
    public ProfessorGetComments setKey(java.lang.String key) {
      return (ProfessorGetComments) super.setKey(key);
    }

    @Override
    public ProfessorGetComments setOauthToken(java.lang.String oauthToken) {
      return (ProfessorGetComments) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfessorGetComments setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfessorGetComments) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfessorGetComments setQuotaUser(java.lang.String quotaUser) {
      return (ProfessorGetComments) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfessorGetComments setUserIp(java.lang.String userIp) {
      return (ProfessorGetComments) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long value;

    /**

     */
    public java.lang.Long getValue() {
      return value;
    }

    public ProfessorGetComments setValue(java.lang.Long value) {
      this.value = value;
      return this;
    }

    @Override
    public ProfessorGetComments set(String parameterName, Object value) {
      return (ProfessorGetComments) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "professor_get_rating".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link ProfessorGetRating#execute()} method to invoke the remote operation.
   *
   * @param value
   * @return the request
   */
  public ProfessorGetRating professorGetRating(java.lang.Long value) throws java.io.IOException {
    ProfessorGetRating result = new ProfessorGetRating(value);
    initialize(result);
    return result;
  }

  public class ProfessorGetRating extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.ProfrateRatingResponse> {

    private static final String REST_PATH = "professor_get_rating";

    /**
     * Create a request for the method "professor_get_rating".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link ProfessorGetRating#execute()} method to invoke the remote
     * operation. <p> {@link ProfessorGetRating#initialize(com.google.api.client.googleapis.services.A
     * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param value
     * @since 1.13
     */
    protected ProfessorGetRating(java.lang.Long value) {
      super(ProfrateAPI.this, "GET", REST_PATH, null, com.appspot.profrate_1148.profrateAPI.model.ProfrateRatingResponse.class);
      this.value = com.google.api.client.util.Preconditions.checkNotNull(value, "Required parameter value must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ProfessorGetRating setAlt(java.lang.String alt) {
      return (ProfessorGetRating) super.setAlt(alt);
    }

    @Override
    public ProfessorGetRating setFields(java.lang.String fields) {
      return (ProfessorGetRating) super.setFields(fields);
    }

    @Override
    public ProfessorGetRating setKey(java.lang.String key) {
      return (ProfessorGetRating) super.setKey(key);
    }

    @Override
    public ProfessorGetRating setOauthToken(java.lang.String oauthToken) {
      return (ProfessorGetRating) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfessorGetRating setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfessorGetRating) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfessorGetRating setQuotaUser(java.lang.String quotaUser) {
      return (ProfessorGetRating) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfessorGetRating setUserIp(java.lang.String userIp) {
      return (ProfessorGetRating) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long value;

    /**

     */
    public java.lang.Long getValue() {
      return value;
    }

    public ProfessorGetRating setValue(java.lang.Long value) {
      this.value = value;
      return this;
    }

    @Override
    public ProfessorGetRating set(String parameterName, Object value) {
      return (ProfessorGetRating) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "professor_get_search_suggestions".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link ProfessorGetSearchSuggestions#execute()} method to invoke the remote
   * operation.
   *
   * @param maxNum
   * @param queryWord
   * @return the request
   */
  public ProfessorGetSearchSuggestions professorGetSearchSuggestions(java.lang.Long maxNum, java.lang.String queryWord) throws java.io.IOException {
    ProfessorGetSearchSuggestions result = new ProfessorGetSearchSuggestions(maxNum, queryWord);
    initialize(result);
    return result;
  }

  public class ProfessorGetSearchSuggestions extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.ProfrateSuggestionsResponse> {

    private static final String REST_PATH = "professor_get_search_suggestions";

    /**
     * Create a request for the method "professor_get_search_suggestions".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link ProfessorGetSearchSuggestions#execute()} method to invoke
     * the remote operation. <p> {@link ProfessorGetSearchSuggestions#initialize(com.google.api.client
     * .googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param maxNum
     * @param queryWord
     * @since 1.13
     */
    protected ProfessorGetSearchSuggestions(java.lang.Long maxNum, java.lang.String queryWord) {
      super(ProfrateAPI.this, "GET", REST_PATH, null, com.appspot.profrate_1148.profrateAPI.model.ProfrateSuggestionsResponse.class);
      this.maxNum = com.google.api.client.util.Preconditions.checkNotNull(maxNum, "Required parameter maxNum must be specified.");
      this.queryWord = com.google.api.client.util.Preconditions.checkNotNull(queryWord, "Required parameter queryWord must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ProfessorGetSearchSuggestions setAlt(java.lang.String alt) {
      return (ProfessorGetSearchSuggestions) super.setAlt(alt);
    }

    @Override
    public ProfessorGetSearchSuggestions setFields(java.lang.String fields) {
      return (ProfessorGetSearchSuggestions) super.setFields(fields);
    }

    @Override
    public ProfessorGetSearchSuggestions setKey(java.lang.String key) {
      return (ProfessorGetSearchSuggestions) super.setKey(key);
    }

    @Override
    public ProfessorGetSearchSuggestions setOauthToken(java.lang.String oauthToken) {
      return (ProfessorGetSearchSuggestions) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfessorGetSearchSuggestions setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfessorGetSearchSuggestions) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfessorGetSearchSuggestions setQuotaUser(java.lang.String quotaUser) {
      return (ProfessorGetSearchSuggestions) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfessorGetSearchSuggestions setUserIp(java.lang.String userIp) {
      return (ProfessorGetSearchSuggestions) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key("max_num")
    private java.lang.Long maxNum;

    /**

     */
    public java.lang.Long getMaxNum() {
      return maxNum;
    }

    public ProfessorGetSearchSuggestions setMaxNum(java.lang.Long maxNum) {
      this.maxNum = maxNum;
      return this;
    }

    @com.google.api.client.util.Key("query_word")
    private java.lang.String queryWord;

    /**

     */
    public java.lang.String getQueryWord() {
      return queryWord;
    }

    public ProfessorGetSearchSuggestions setQueryWord(java.lang.String queryWord) {
      this.queryWord = queryWord;
      return this;
    }

    @Override
    public ProfessorGetSearchSuggestions set(String parameterName, Object value) {
      return (ProfessorGetSearchSuggestions) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "professor_rate".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link ProfessorRate#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.ProfrateRateRequest}
   * @return the request
   */
  public ProfessorRate professorRate(com.appspot.profrate_1148.profrateAPI.model.ProfrateRateRequest content) throws java.io.IOException {
    ProfessorRate result = new ProfessorRate(content);
    initialize(result);
    return result;
  }

  public class ProfessorRate extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage> {

    private static final String REST_PATH = "professor_rate";

    /**
     * Create a request for the method "professor_rate".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link ProfessorRate#execute()} method to invoke the remote
     * operation. <p> {@link ProfessorRate#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.ProfrateRateRequest}
     * @since 1.13
     */
    protected ProfessorRate(com.appspot.profrate_1148.profrateAPI.model.ProfrateRateRequest content) {
      super(ProfrateAPI.this, "POST", REST_PATH, content, com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage.class);
    }

    @Override
    public ProfessorRate setAlt(java.lang.String alt) {
      return (ProfessorRate) super.setAlt(alt);
    }

    @Override
    public ProfessorRate setFields(java.lang.String fields) {
      return (ProfessorRate) super.setFields(fields);
    }

    @Override
    public ProfessorRate setKey(java.lang.String key) {
      return (ProfessorRate) super.setKey(key);
    }

    @Override
    public ProfessorRate setOauthToken(java.lang.String oauthToken) {
      return (ProfessorRate) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfessorRate setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfessorRate) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfessorRate setQuotaUser(java.lang.String quotaUser) {
      return (ProfessorRate) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfessorRate setUserIp(java.lang.String userIp) {
      return (ProfessorRate) super.setUserIp(userIp);
    }

    @Override
    public ProfessorRate set(String parameterName, Object value) {
      return (ProfessorRate) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "professor_search".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link ProfessorSearch#execute()} method to invoke the remote operation.
   *
   * @param value
   * @return the request
   */
  public ProfessorSearch professorSearch(java.lang.String value) throws java.io.IOException {
    ProfessorSearch result = new ProfessorSearch(value);
    initialize(result);
    return result;
  }

  public class ProfessorSearch extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.ProfrateMultiProfessorResponse> {

    private static final String REST_PATH = "professor_search";

    /**
     * Create a request for the method "professor_search".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link ProfessorSearch#execute()} method to invoke the remote
     * operation. <p> {@link ProfessorSearch#initialize(com.google.api.client.googleapis.services.Abst
     * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param value
     * @since 1.13
     */
    protected ProfessorSearch(java.lang.String value) {
      super(ProfrateAPI.this, "GET", REST_PATH, null, com.appspot.profrate_1148.profrateAPI.model.ProfrateMultiProfessorResponse.class);
      this.value = com.google.api.client.util.Preconditions.checkNotNull(value, "Required parameter value must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ProfessorSearch setAlt(java.lang.String alt) {
      return (ProfessorSearch) super.setAlt(alt);
    }

    @Override
    public ProfessorSearch setFields(java.lang.String fields) {
      return (ProfessorSearch) super.setFields(fields);
    }

    @Override
    public ProfessorSearch setKey(java.lang.String key) {
      return (ProfessorSearch) super.setKey(key);
    }

    @Override
    public ProfessorSearch setOauthToken(java.lang.String oauthToken) {
      return (ProfessorSearch) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfessorSearch setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfessorSearch) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfessorSearch setQuotaUser(java.lang.String quotaUser) {
      return (ProfessorSearch) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfessorSearch setUserIp(java.lang.String userIp) {
      return (ProfessorSearch) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String value;

    /**

     */
    public java.lang.String getValue() {
      return value;
    }

    public ProfessorSearch setValue(java.lang.String value) {
      this.value = value;
      return this;
    }

    @Override
    public ProfessorSearch set(String parameterName, Object value) {
      return (ProfessorSearch) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "professor_toggle_dislike".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link ProfessorToggleDislike#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage}
   * @return the request
   */
  public ProfessorToggleDislike professorToggleDislike(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage content) throws java.io.IOException {
    ProfessorToggleDislike result = new ProfessorToggleDislike(content);
    initialize(result);
    return result;
  }

  public class ProfessorToggleDislike extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage> {

    private static final String REST_PATH = "professor_toggle_dislike";

    /**
     * Create a request for the method "professor_toggle_dislike".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link ProfessorToggleDislike#execute()} method to invoke the
     * remote operation. <p> {@link ProfessorToggleDislike#initialize(com.google.api.client.googleapis
     * .services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage}
     * @since 1.13
     */
    protected ProfessorToggleDislike(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage content) {
      super(ProfrateAPI.this, "POST", REST_PATH, content, com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage.class);
    }

    @Override
    public ProfessorToggleDislike setAlt(java.lang.String alt) {
      return (ProfessorToggleDislike) super.setAlt(alt);
    }

    @Override
    public ProfessorToggleDislike setFields(java.lang.String fields) {
      return (ProfessorToggleDislike) super.setFields(fields);
    }

    @Override
    public ProfessorToggleDislike setKey(java.lang.String key) {
      return (ProfessorToggleDislike) super.setKey(key);
    }

    @Override
    public ProfessorToggleDislike setOauthToken(java.lang.String oauthToken) {
      return (ProfessorToggleDislike) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfessorToggleDislike setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfessorToggleDislike) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfessorToggleDislike setQuotaUser(java.lang.String quotaUser) {
      return (ProfessorToggleDislike) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfessorToggleDislike setUserIp(java.lang.String userIp) {
      return (ProfessorToggleDislike) super.setUserIp(userIp);
    }

    @Override
    public ProfessorToggleDislike set(String parameterName, Object value) {
      return (ProfessorToggleDislike) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "professor_toggle_like".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link ProfessorToggleLike#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage}
   * @return the request
   */
  public ProfessorToggleLike professorToggleLike(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage content) throws java.io.IOException {
    ProfessorToggleLike result = new ProfessorToggleLike(content);
    initialize(result);
    return result;
  }

  public class ProfessorToggleLike extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage> {

    private static final String REST_PATH = "professor_toggle_like";

    /**
     * Create a request for the method "professor_toggle_like".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link ProfessorToggleLike#execute()} method to invoke the remote
     * operation. <p> {@link ProfessorToggleLike#initialize(com.google.api.client.googleapis.services.
     * AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage}
     * @since 1.13
     */
    protected ProfessorToggleLike(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage content) {
      super(ProfrateAPI.this, "POST", REST_PATH, content, com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage.class);
    }

    @Override
    public ProfessorToggleLike setAlt(java.lang.String alt) {
      return (ProfessorToggleLike) super.setAlt(alt);
    }

    @Override
    public ProfessorToggleLike setFields(java.lang.String fields) {
      return (ProfessorToggleLike) super.setFields(fields);
    }

    @Override
    public ProfessorToggleLike setKey(java.lang.String key) {
      return (ProfessorToggleLike) super.setKey(key);
    }

    @Override
    public ProfessorToggleLike setOauthToken(java.lang.String oauthToken) {
      return (ProfessorToggleLike) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfessorToggleLike setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfessorToggleLike) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfessorToggleLike setQuotaUser(java.lang.String quotaUser) {
      return (ProfessorToggleLike) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfessorToggleLike setUserIp(java.lang.String userIp) {
      return (ProfessorToggleLike) super.setUserIp(userIp);
    }

    @Override
    public ProfessorToggleLike set(String parameterName, Object value) {
      return (ProfessorToggleLike) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "professor_write_article".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link ProfessorWriteArticle#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.ProfrateWriteArtilceRequest}
   * @return the request
   */
  public ProfessorWriteArticle professorWriteArticle(com.appspot.profrate_1148.profrateAPI.model.ProfrateWriteArtilceRequest content) throws java.io.IOException {
    ProfessorWriteArticle result = new ProfessorWriteArticle(content);
    initialize(result);
    return result;
  }

  public class ProfessorWriteArticle extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage> {

    private static final String REST_PATH = "professor_write_article";

    /**
     * Create a request for the method "professor_write_article".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link ProfessorWriteArticle#execute()} method to invoke the
     * remote operation. <p> {@link ProfessorWriteArticle#initialize(com.google.api.client.googleapis.
     * services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.ProfrateWriteArtilceRequest}
     * @since 1.13
     */
    protected ProfessorWriteArticle(com.appspot.profrate_1148.profrateAPI.model.ProfrateWriteArtilceRequest content) {
      super(ProfrateAPI.this, "POST", REST_PATH, content, com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIIntegerMessage.class);
    }

    @Override
    public ProfessorWriteArticle setAlt(java.lang.String alt) {
      return (ProfessorWriteArticle) super.setAlt(alt);
    }

    @Override
    public ProfessorWriteArticle setFields(java.lang.String fields) {
      return (ProfessorWriteArticle) super.setFields(fields);
    }

    @Override
    public ProfessorWriteArticle setKey(java.lang.String key) {
      return (ProfessorWriteArticle) super.setKey(key);
    }

    @Override
    public ProfessorWriteArticle setOauthToken(java.lang.String oauthToken) {
      return (ProfessorWriteArticle) super.setOauthToken(oauthToken);
    }

    @Override
    public ProfessorWriteArticle setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ProfessorWriteArticle) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ProfessorWriteArticle setQuotaUser(java.lang.String quotaUser) {
      return (ProfessorWriteArticle) super.setQuotaUser(quotaUser);
    }

    @Override
    public ProfessorWriteArticle setUserIp(java.lang.String userIp) {
      return (ProfessorWriteArticle) super.setUserIp(userIp);
    }

    @Override
    public ProfessorWriteArticle set(String parameterName, Object value) {
      return (ProfessorWriteArticle) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "user_create".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link UserCreate#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIStringMessage}
   * @return the request
   */
  public UserCreate userCreate(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIStringMessage content) throws java.io.IOException {
    UserCreate result = new UserCreate(content);
    initialize(result);
    return result;
  }

  public class UserCreate extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage> {

    private static final String REST_PATH = "user_create";

    /**
     * Create a request for the method "user_create".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link UserCreate#execute()} method to invoke the remote
     * operation. <p> {@link
     * UserCreate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIStringMessage}
     * @since 1.13
     */
    protected UserCreate(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIStringMessage content) {
      super(ProfrateAPI.this, "POST", REST_PATH, content, com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage.class);
    }

    @Override
    public UserCreate setAlt(java.lang.String alt) {
      return (UserCreate) super.setAlt(alt);
    }

    @Override
    public UserCreate setFields(java.lang.String fields) {
      return (UserCreate) super.setFields(fields);
    }

    @Override
    public UserCreate setKey(java.lang.String key) {
      return (UserCreate) super.setKey(key);
    }

    @Override
    public UserCreate setOauthToken(java.lang.String oauthToken) {
      return (UserCreate) super.setOauthToken(oauthToken);
    }

    @Override
    public UserCreate setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UserCreate) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UserCreate setQuotaUser(java.lang.String quotaUser) {
      return (UserCreate) super.setQuotaUser(quotaUser);
    }

    @Override
    public UserCreate setUserIp(java.lang.String userIp) {
      return (UserCreate) super.setUserIp(userIp);
    }

    @Override
    public UserCreate set(String parameterName, Object value) {
      return (UserCreate) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "user_edit_name".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link UserEditName#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIStringMessage}
   * @return the request
   */
  public UserEditName userEditName(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIStringMessage content) throws java.io.IOException {
    UserEditName result = new UserEditName(content);
    initialize(result);
    return result;
  }

  public class UserEditName extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage> {

    private static final String REST_PATH = "user_edit_name";

    /**
     * Create a request for the method "user_edit_name".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link UserEditName#execute()} method to invoke the remote
     * operation. <p> {@link
     * UserEditName#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIStringMessage}
     * @since 1.13
     */
    protected UserEditName(com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIStringMessage content) {
      super(ProfrateAPI.this, "POST", REST_PATH, content, com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIBooleanMessage.class);
    }

    @Override
    public UserEditName setAlt(java.lang.String alt) {
      return (UserEditName) super.setAlt(alt);
    }

    @Override
    public UserEditName setFields(java.lang.String fields) {
      return (UserEditName) super.setFields(fields);
    }

    @Override
    public UserEditName setKey(java.lang.String key) {
      return (UserEditName) super.setKey(key);
    }

    @Override
    public UserEditName setOauthToken(java.lang.String oauthToken) {
      return (UserEditName) super.setOauthToken(oauthToken);
    }

    @Override
    public UserEditName setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UserEditName) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UserEditName setQuotaUser(java.lang.String quotaUser) {
      return (UserEditName) super.setQuotaUser(quotaUser);
    }

    @Override
    public UserEditName setUserIp(java.lang.String userIp) {
      return (UserEditName) super.setUserIp(userIp);
    }

    @Override
    public UserEditName set(String parameterName, Object value) {
      return (UserEditName) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "user_get".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link UserGet#execute()} method to invoke the remote operation.
   *
   * @param value
   * @return the request
   */
  public UserGet userGet(java.lang.String value) throws java.io.IOException {
    UserGet result = new UserGet(value);
    initialize(result);
    return result;
  }

  public class UserGet extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.ProfrateUserResponse> {

    private static final String REST_PATH = "user_get";

    /**
     * Create a request for the method "user_get".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link UserGet#execute()} method to invoke the remote operation.
     * <p> {@link
     * UserGet#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param value
     * @since 1.13
     */
    protected UserGet(java.lang.String value) {
      super(ProfrateAPI.this, "GET", REST_PATH, null, com.appspot.profrate_1148.profrateAPI.model.ProfrateUserResponse.class);
      this.value = com.google.api.client.util.Preconditions.checkNotNull(value, "Required parameter value must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public UserGet setAlt(java.lang.String alt) {
      return (UserGet) super.setAlt(alt);
    }

    @Override
    public UserGet setFields(java.lang.String fields) {
      return (UserGet) super.setFields(fields);
    }

    @Override
    public UserGet setKey(java.lang.String key) {
      return (UserGet) super.setKey(key);
    }

    @Override
    public UserGet setOauthToken(java.lang.String oauthToken) {
      return (UserGet) super.setOauthToken(oauthToken);
    }

    @Override
    public UserGet setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UserGet) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UserGet setQuotaUser(java.lang.String quotaUser) {
      return (UserGet) super.setQuotaUser(quotaUser);
    }

    @Override
    public UserGet setUserIp(java.lang.String userIp) {
      return (UserGet) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String value;

    /**

     */
    public java.lang.String getValue() {
      return value;
    }

    public UserGet setValue(java.lang.String value) {
      this.value = value;
      return this;
    }

    @Override
    public UserGet set(String parameterName, Object value) {
      return (UserGet) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "user_get_photo_upload_url".
   *
   * This request holds the parameters needed by the profrateAPI server.  After setting any optional
   * parameters, call the {@link UserGetPhotoUploadUrl#execute()} method to invoke the remote
   * operation.
   *
   * @return the request
   */
  public UserGetPhotoUploadUrl userGetPhotoUploadUrl() throws java.io.IOException {
    UserGetPhotoUploadUrl result = new UserGetPhotoUploadUrl();
    initialize(result);
    return result;
  }

  public class UserGetPhotoUploadUrl extends ProfrateAPIRequest<com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIStringMessage> {

    private static final String REST_PATH = "user_get_photo_upload_url";

    /**
     * Create a request for the method "user_get_photo_upload_url".
     *
     * This request holds the parameters needed by the the profrateAPI server.  After setting any
     * optional parameters, call the {@link UserGetPhotoUploadUrl#execute()} method to invoke the
     * remote operation. <p> {@link UserGetPhotoUploadUrl#initialize(com.google.api.client.googleapis.
     * services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected UserGetPhotoUploadUrl() {
      super(ProfrateAPI.this, "GET", REST_PATH, null, com.appspot.profrate_1148.profrateAPI.model.SourceBackendAPIStringMessage.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public UserGetPhotoUploadUrl setAlt(java.lang.String alt) {
      return (UserGetPhotoUploadUrl) super.setAlt(alt);
    }

    @Override
    public UserGetPhotoUploadUrl setFields(java.lang.String fields) {
      return (UserGetPhotoUploadUrl) super.setFields(fields);
    }

    @Override
    public UserGetPhotoUploadUrl setKey(java.lang.String key) {
      return (UserGetPhotoUploadUrl) super.setKey(key);
    }

    @Override
    public UserGetPhotoUploadUrl setOauthToken(java.lang.String oauthToken) {
      return (UserGetPhotoUploadUrl) super.setOauthToken(oauthToken);
    }

    @Override
    public UserGetPhotoUploadUrl setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UserGetPhotoUploadUrl) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UserGetPhotoUploadUrl setQuotaUser(java.lang.String quotaUser) {
      return (UserGetPhotoUploadUrl) super.setQuotaUser(quotaUser);
    }

    @Override
    public UserGetPhotoUploadUrl setUserIp(java.lang.String userIp) {
      return (UserGetPhotoUploadUrl) super.setUserIp(userIp);
    }

    @Override
    public UserGetPhotoUploadUrl set(String parameterName, Object value) {
      return (UserGetPhotoUploadUrl) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link ProfrateAPI}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link ProfrateAPI}. */
    @Override
    public ProfrateAPI build() {
      return new ProfrateAPI(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ProfrateAPIRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setProfrateAPIRequestInitializer(
        ProfrateAPIRequestInitializer profrateapiRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(profrateapiRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
